# Blockchain-Based E-Voting System - Setup and Run Commands

## Prerequisites Setup
# Install Java 17 (if not already installed)
# Download from: https://adoptium.net/temurin/releases/

# Install Maven 3.6+ (if not already installed)
# Download from: https://maven.apache.org/download.cgi

# Install PostgreSQL 14+ (if not already installed)
# Download from: https://www.postgresql.org/download/

# Install Ganache (Ethereum local blockchain) for development
# Download from: https://trufflesuite.com/ganache/

## Project Setup Commands

### 1. Navigate to project directory
cd "/Users/akshat/Desktop/Projects/Blockchain Based Voting system"
# Changes to the project root directory

### 2. Activate Python virtual environment
source venv/bin/activate
# Activates the Python virtual environment for dependency isolation

### 3. Install Python dependencies (if needed)
pip install -r requirements.txt
# Installs all Python packages listed in requirements.txt for development tools

### 4. Create PostgreSQL database
createdb evoting_db
# Creates the database for the voting system (using default postgres user)

# Alternative: Using psql command line
psql -U postgres
# Logs into PostgreSQL command line
CREATE DATABASE evoting_db;
# Creates the database for the voting system
\q
# Exits PostgreSQL command line

### 5. Configure database credentials (if needed)
# Edit src/main/resources/application.properties
# Update spring.datasource.username and spring.datasource.password
# Default: username=postgres, password=password

### 6. Start Ganache (Ethereum local blockchain)
# Open Ganache application and start a new workspace
# Note the RPC server URL (usually http://127.0.0.1:7545)
# Copy a private key from Ganache for blockchain transactions

### 7. Build the Java application
mvn clean install
# Cleans previous builds and compiles the Spring Boot application
# Downloads all Maven dependencies and runs tests

### 8. Run the Spring Boot application
mvn spring-boot:run
# Starts the Spring Boot application on port 8080
# Application will be available at http://localhost:8080

### Alternative: Run with production profile
mvn spring-boot:run -Dspring-boot.run.profiles=prod
# Runs the application with production configuration

### Alternative: Run the built JAR file
java -jar target/blockchain-voting-system-1.0.0.jar
# Runs the packaged JAR file directly

## Testing Commands

### Run unit tests
mvn test
# Executes all JUnit tests in the project

### Run specific test class
mvn test -Dtest=BlockchainVotingSystemApplicationTests
# Runs only the specified test class

### Generate test coverage report
mvn test jacoco:report
# Generates code coverage reports (if JaCoCo plugin configured)

## Development Commands

### Compile only (without tests)
mvn compile
# Compiles the Java source code without running tests

### Package the application
mvn package
# Creates a JAR file in the target/ directory

### Clean build artifacts
mvn clean
# Removes all build artifacts from target/ directory

### Check for dependency updates
mvn versions:display-dependency-updates
# Shows available updates for project dependencies

## Database Commands

### View application logs with database queries
mvn spring-boot:run | grep -i "hibernate\|sql"
# Runs the application and filters logs to show database queries

### Reset database (development only)
# Drop and recreate the database, then run:
mvn spring-boot:run
# This will recreate tables due to spring.jpa.hibernate.ddl-auto=update

## API Testing Commands

### Test authentication endpoint
curl -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"password"}'
# Tests the login endpoint

### Test getting active elections
curl -X GET http://localhost:8080/api/elections/active \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"
# Tests retrieving active elections (requires authentication)

### Health check
curl http://localhost:8080/actuator/health
# Checks if the application is running (if actuator enabled)

## Troubleshooting Commands

### Check Java version
java -version
# Verifies Java installation and version

### Check Maven version
mvn -version
# Verifies Maven installation and version

### Check PostgreSQL connection
psql -U postgres -d evoting_db -c "SELECT 1;"
# Tests PostgreSQL connection

### View application logs
tail -f logs/application.log
# Monitors application logs in real-time

### Kill process on port 8080 (if needed)
lsof -ti:8080 | xargs kill -9
# Forcefully stops any process running on port 8080

## Deployment Commands

### Build for production
mvn clean package -DskipTests
# Creates production JAR without running tests

### Run with specific profile
java -jar target/blockchain-voting-system-1.0.0.jar --spring.profiles.active=prod
# Runs the application with production configuration

### Run in background
nohup java -jar target/blockchain-voting-system-1.0.0.jar > app.log 2>&1 &
# Runs the application in background and logs output

## Environment Variables (Optional)

### Set environment variables
export SPRING_DATASOURCE_USERNAME=your_db_user
export SPRING_DATASOURCE_PASSWORD=your_db_password
export JWT_SECRET=your_jwt_secret_key
# Sets environment variables for sensitive configuration

## Frontend Setup and Run Commands

### Prerequisites for Frontend
# Install Node.js 18+ and npm (comes with Node.js)
# Download from: https://nodejs.org/

# Install Angular CLI globally (if not already installed)
npm install -g @angular/cli@17
# Installs Angular CLI version 17 globally for project management

### 1. Navigate to frontend directory
cd frontend
# Changes to the frontend directory

### 2. Install Angular dependencies
npm install
# Installs all Node.js packages listed in package.json

### 3. Run Angular development server
ng serve
# Starts the Angular development server on http://localhost:4200
# Automatically reloads on file changes

### 4. Run with proxy configuration (recommended)
ng serve --proxy-config proxy.conf.json
# Runs Angular with proxy to backend API to avoid CORS issues
# Proxies API calls to http://localhost:8080

### 5. Run on different port (if 4200 is occupied)
ng serve --port 4201
# Runs Angular on port 4201 instead of default 4200

### 6. Build for production
ng build --configuration production
# Builds the application for production deployment
# Output goes to dist/ directory

### 7. Run production build locally
ng serve --configuration production
# Serves the production build locally for testing

### 8. Generate new component
ng generate component my-component
# Creates a new Angular component with files and updates app.module.ts

### 9. Generate new service
ng generate service my-service
# Creates a new Angular service for API calls or business logic

### 10. Run Angular tests
ng test
# Runs unit tests using Karma and Jasmine

### 11. Run Angular linting
ng lint
# Checks code quality and style using ESLint

### 12. Update Angular dependencies
ng update
# Updates Angular and its dependencies to latest versions

### 13. View Angular CLI help
ng help
# Shows all available Angular CLI commands

## Full Stack Development Commands

### Run Backend and Frontend Simultaneously
# Terminal 1: Start Backend
mvn spring-boot:run

# Terminal 2: Start Frontend
cd frontend && ng serve --proxy-config proxy.conf.json

# Both will be running:
# Backend: http://localhost:8080
# Frontend: http://localhost:4200

## Quick Start (All-in-one command)
mvn clean install && mvn spring-boot:run
# Builds and runs the application in one command (after database setup)
